<section id="other-topics">
 <title>Other Topics</title>

 <!-- === DNSSEC and Dynamic Updates === -->
 <section id="dnssec-and-dynamic-updates">
  <title>DNSSEC and Dynamic Updates</title>

  <para>Dynamic DNS (DDNS) actually is independent of DNSSEC. DDNS provides a
  mechanism other than editing the zone file or zone database, to edit DNS
  data. Most clients and DNS servers have the capability to handle dynamic
  updates, and DDNS can also be integrated as part of your DHCP
  environment.</para>

  <para>When you have both DNSSEC and dynamic updates in your environment,
  updating zone data works the same way as with traditional (insecure) DNS: you
  can use <command>rndc freeze</command> before editing the zone file, and
  <command>rndc thaw</command> when you have finished editing, or you could use
  the command <command>nsupdate</command> to add, edit, or remove records like
  this:
   <screen>$ <userinput>nsupdate</userinput>
> server 192.168.1.13
> update add xyz.example.com. 300 IN A 1.1.1.1
> send
> quit</screen></para>

  <para>The examples provided in this guide will make <command>named</command>
  automatically re-sign the zone whenever its content has changed. If you
  decide to sign your own zone file manually, you will need to remember to
  executed the <command>dnssec-signzone</command> whenever your zone file has
  been updated.</para>

  <para>As far as system resources and performance is concerned, be mindful
  that when you have a DNSSEC zone that changes frequently, every time the zone
  changes, your system is executing a series of cryptographic operations to
  (re)generate signatures and NSEC or NSEC3 records.</para>
 </section>

 <!-- === DNSSEC and Inline Signing === -->
 <section id="dnssec-and-inline-signing">
  <title>DNSSEC and Inline Signing</title>

  <para>ISC introduces the "inline-signing" option with the release of BIND
  9.9, which allows <command>named</command> to sign zones completely
  transparently. <command>named</command> does this by automatically creating
  an internal version of the zone that is signed on the fly, and only the
  signed version of the zone is presented to queries. The unsigned version of
  the zone file is untouched on the file system, but not served.</para>

  <para>This features simplifies DNSSEC deployment, below are two common
  scenarios of how this feature can be used:

   <orderedlist>
    <listitem>
     <simpara><emphasis>You administer the master server, with zone
     transfers to other slave servers</emphasis>: This is what most
     examples in this guide describes, you have control over the master
     server, you you can follow the instruction in <xref
     linkend="easy-start-guide-for-authoritative-servers" /> to generate
     key pairs and modify <command>named.conf</command>. A signed version
     of the zone is either generated on the fly by inline-signing, and
     zone transfers will take care of synchronizing the signed zone data
     to all slave name servers.</simpara>
    </listitem> 

    <listitem>
     <simpara><emphasis>You cannot easily modify the master sever
     configuration, but still would like all slave servers to get DNSSEC
     zones</emphasis>: you can setup a "middle box" that all slave name
     servers transfer data from, and your middle box gets its zone from
     the master server. You do not need to modify the master name server
     configuration at all, on the middle box, set it up to have inline
     signing enabled, whenever your middle box receives zone transfer
     (unsigned) from the master server, a signed version is generated on
     the fly, and this is the version that will be transferred out to the
     other slave name servers.</simpara>
    </listitem>
   </orderedlist>
  </para>

  <para>For more details and configuration examples on Inline Signing,
  please see <ulink url="https://kb.isc.org/article/AA-00626" />.</para>
 </section>

 <!-- === DNSSEC Look-aside Validation === -->
 <section id="dlv">
  <title>DNSSEC Look-aside Validation (DLV)</title>
 </section>

 <!-- === DNSSEC on Private Networks === -->
 <section id="dnssec-on-private-networks">
  <title>DNSSEC on Private Networks</title>
 </section>

 <!-- === Intro to DANE === -->
 <section id="introduction-to-dane">
  <title>Introduction to DANE</title>

  <para>With your DNS infrastructure secured, a whole new set of
  possibilities and features become available to you. One of these new
  features is the DNS-Based Authentication of Named Entities, or DANE,
  which as of this writing, introduces a new record type TLSA. In short,
  it allows us to store more generic encryption keys or hashes in DNS for
  wide distribution.</para>

  <para>So? You might think to yourself. We already have DNSKEY. True, but
  DNSKEY is not a generic record type, it is specifically only used in the
  context to secure DNS(SEC). The new record type TLSA can be used to
  store generic Transport Layer Security (TLS) objects, such as X.509
  certificates. This object can be then be used by applications to do,
  well, a lot of things. Below is a list of features currently being
  developed and tested by the DANE community:

   <itemizedlist>
    <listitem>
     <simpara>Use DANE as a verification mechanism to verify SSL
     certificates received over HTTPS for added security. You can see a
     live demonstration here: <ulink url="http://dane.verisignlabs.com/"
     />.</simpara>
    </listitem>
    <listitem>
     <simpara>Store self-signed X.509 certificates, bypass having to pay a
     third party (such as a Certificate Authority) to sign the
     certificates.</simpara>
    </listitem>
    <listitem>
     <simpara>Integrate with Mail Transfer Agents (MTA) to provide seamless
     email encryption.</simpara>
    </listitem>
   </itemizedlist>
  </para>

  <para>DANE is an exciting area for DNS administrators, if you would like
  to learn more about the standards being proposed or new features being
  discussed, check out the DANE working group:  <ulink
  url="https://datatracker.ietf.org/wg/dane/charter/" />.</para>
 </section>
</section>
