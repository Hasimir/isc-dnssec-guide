<section id="signing-easy-start-explained">
 <title>Signing Easy Start Explained</title> 

 <!-- === Generate Keys Explained === -->
 <section id="signing-generate-keys-explained">
  <title>Generate Keys Explained</title>
  <para>In <xref linkend="signing-easy-start-generate-keys"/>, we generated two pairs of keys by running these commands:
   <screen># <userinput>cd /etc/bind/keys/example.com</userinput>
# <userinput>dnssec-keygen -a RSASHA256 -b 1024 -3 example.com</userinput>
Generating key pair...++++++ .............++++++ 
Kexample.com.+008+57009
# <userinput>dnssec-keygen -a RSASHA256 -b 2048 -3 -f KSK example.com</userinput>
Generating key pair........................+++ ..................................+++ 
Kexample.com.+008+28267</screen></para>

  <para>With these commands, we generated NSEC3-compatible key pairs (see <xref linkend="advanced-discussions-nsec3"/> to learn more about NSEC3). In the end, four key files were created in <filename>/etc/bind/keys/example.com</filename>:
   <itemizedlist>
    <listitem><simpara><filename>Kexample.com.+008+28267.key</filename></simpara></listitem>
    <listitem><simpara><filename>Kexample.com.+008+28267.private</filename></simpara></listitem>
    <listitem><simpara><filename>Kexample.com.+008+57009.key</filename></simpara></listitem>
    <listitem><simpara><filename>Kexample.com.+008+57009.private</filename></simpara></listitem>
   </itemizedlist></para>

  <para>The two files ending in <code>.private</code> need to be kept, well, private. These are your private keys, guard them carefully. You should at the very least protect them via file permission settings. Please see <xref linkend="advanced-discussions-key-storage"/> for more information about how to store your keys.</para>

  <para>The two files ending in <code>.key</code> are your public keys. One is the zone-signing key (ZSK), and one is the key-signing Key (KSK). We can tell which is which by looking at the actual file contents (actual keys shortened for display):
   <screen># <userinput>cat Kexample.com.+008+28267.key
; This is a key-signing key, keyid 28267, for example.com.</userinput>
; Created: 20141025013006 (Sat Oct 25 09:30:06 2014)
; Publish: 20141025013006 (Sat Oct 25 09:30:06 2014)
; Activate: 20141025013006 (Sat Oct 25 09:30:06 2014)
example.com. IN DNSKEY 257 3 8 AwEAAb4N53...1EskDIMy8=

# <userinput>cat Kexample.com.+008+57009.key
; This is a zone-signing key, keyid 57009, for example.com.</userinput>
; Created: 20141025012905 (Sat Oct 25 09:29:05 2014)
; Publish: 20141025012905 (Sat Oct 25 09:29:05 2014)
; Activate: 20141025012905 (Sat Oct 25 09:29:05 2014)
example.com. IN DNSKEY 256 3 8 AwEAAfbc/0...k RRUS08lf</screen></para>

  <para>The first line of each file tell us what type of key it is. Also, by looking at the actual DNSKEY record, we could tell them apart: 256 is ZSK, and 257 is KSK.</para>

  <para>So, this is a ZSK:
   <screen># <userinput>cat Kexample.com.+008+57009.key</userinput>
...
example.com. IN DNSKEY <userinput>256</userinput> 3 8 AwEAAfbc/0...k RRUS08lf</screen></para>

  <para>And this is a KSK:
   <screen># <userinput>cat Kexample.com.+008+28267.key</userinput>
...
example.com. IN DNSKEY <userinput>257</userinput> 3 8 AwEAAb4N53...1EskDIMy8=</screen></para>

  <para>The parameters we showed in the example, algorithm of RSASHA256, key length of 1024 and 2048, and the use of NSEC3 are just suggestions, you need to evaluate what values work best for your environment. To learn more about key generation, different algorithm choices, and key sizes, see <xref linkend="advanced-discussions-key-generation"/>.</para>
 </section>


 <!-- === Reconfigure BIND Explained === -->
 <section id="signing-reconfigure-bind-explained">
  <title>Reconfigure BIND Explained</title>
  <para>In <xref linkend="signing-easy-start-reconfigure-bind"/>, we highlighted a few lines, let's explain what each one of them does.
   <screen>options {
    <userinput>dnssec-enable yes;</userinput>
    directory "/etc/bind";
    recursion no;
    minimal-responses yes;
};

zone "example.com" IN {
    type master;
    file "db/example.com.db";
    <userinput>key-directory "keys/example.com";
    inline-signing yes;
    auto-dnssec maintain;</userinput>
};</screen></para>

  <!-- ====== dnssec-enable ====== -->
  <section id="signing-dnssec-enable-explained">
   <title>dnssec-enable</title>
   <screen>options {
    dnssec-enable yes;
};</screen>
   <para>This line enables DNSSEC support in <command>named</command>. If not set, named behaves as if it does not support DNSSEC. The default is yes. We are just explicitly declaring it again here, in case your distribution has it disabled.</para>
  </section>

  <!-- ====== key-directory ====== -->
  <section id="signing-key-directory-explained">
   <title>key-directory</title>
   <screen>zone "example.com" IN {
    key-directory "keys/example.com";
};</screen>
   <para>This specifies where <command>named</command> should look for public and private DNSSEC key files. The default is the current working directory. In our example, we organized keys based on zone names, and placed all keys for <code>example.com</code> under one directory <filename>/etc/bind/keys/example.com</filename>.</para>
  </section>
 
  <!-- ====== inline-signing ====== -->
  <section id="signing-inline-signing-explained">
   <title>inline-signing</title>
   <screen>zone "example.com" IN {
    inline-signing yes;
};</screen>
   <para>This option is disabled by default. When enabled, BIND converts traditional (insecure) zone data to signed (secure) data automatically and transparently, using keys found in <varname>key-directory</varname>.</para>

   <para>This feature alleviates the burden of resigning zone data put on DNSSEC zone administrators. As the zone administrator, you can continue to manually maintain the unsigned version of the zone just like before, and BIND will automatically convert the zone into a dynamic zone, sign it on the fly, and incrementing serial number automatically for the signed version of the zone. The unsigned version of the zone is left intact.</para>

   <para>To learn more about inline signing and some examples of using it in your DNSSEC deployment strategy, please see <ulink url="https://kb.isc.org/article/AA-00626">Inline Signing in ISC BIND 9.9.0 -- Examples</ulink>.</para>
  </section>

  <!-- ====== auto-dnssec ====== -->
  <section id="signing-auto-dnssec-explained">
   <title>auto-dnssec</title>
   <screen>zone "example.com" IN {
    auto-dnssec maintain;
};</screen>
   <para>With keys, comes the burden of key management. <varname>auto-dnssec</varname> provides varying levels of automatic key management. There are three possible settings:
    <orderedlist>
     <!-- #1 -->
     <listitem>
      <simpara><emphasis>off</emphasis>: this is the default, key management is done manually</simpara>
     </listitem>

     <!-- #2 -->
     <listitem>
      <simpara><emphasis>allow</emphasis>: permits keys to be updated and the zone fully re-signed whenever the user issues the command rndc sign zonename.</simpara>
     </listitem>

     <!-- #3 -->
     <listitem>
      <simpara><emphasis>maintain</emphasis>: includes what "allow" has, but also automatically adjusts the zone's DNSSEC keys on schedule, according to the key's timing metadata.</simpara>
     </listitem>
    </orderedlist></para>

    <para>We have opted for the "maintain" mode in our example, which provides the most automated key management. With this option enabled, BIND will periodically check to see if new keys are available, or old keys need to be retired, and automatically add or remove the appropriate DNSKEY records from the zone. The frequency of the check can be controlled via <varname>dnssec-loadkeys-interval</varname>, default is 60 minutes (1 hour).</para>
  </section>

  <!-- TODO: jkuo  Sat Oct 25 01:21:44 UTC 2014
       Need to write a section on manually management in the Advanced Discussion section
       that covers these two areas:
       1) No auto-dnssec (no key management)
       2) No inline-signing (manual signing, need to discuss dnssec-signzone)
  -->
  <note>
   <para>If you don't like all this auto-magic of inline signing and key rollovers, see the section on "Manual Management".</para>
  </note>
 </section>

 
 <!-- === Additional Privacy Explained === -->
 <!--
 <section id="signing-additional-privacy-explained">
  <title>Additional Privacy Explained</title>
  <para>In <xref linkend="signing-easy-start-additional-privacy"/>, we used a not-very random hex string 1234567890abcdef to sign our zone data:

   <screen># <userinput>rndc signing -nsec3param 1 0 10 1234567890abcdef example.com</userinput></screen></para>

  <para>Actually, if you looked at your zone data, DNSSEC records were already generated before running this command. As soon as BIND is able to load keys, since inline signing was enabled, a signed version of the zone would be created, but with the default NSEC records.</para>
  
  <para>We are doing this extra step to create NSEC3 records for our zone, which provides more privacy for our zone data through the use of secure hashing algorithms. In our example, there are four parameters used, in the order they appeared, 1 represents the algorithm, 0 represents the opt-out flag, 10 represents the number of iterations, and 1234567890abcedf is the salt. Let's look at how each one can be configured:
   <itemizedlist>
    <listitem>
     <simpara><emphasis>Algorithm</emphasis>: Not much of a choice here, the only defined value currently is 1 for SHA-1.</simpara></listitem>
    <listitem>
     <simpara><emphasis>Opt-out</emphasis>: Set this to 1 if you want to do NSEC3 opt-out (see <xref linkend="advanced-discussions-nsec3-optout"/> for more information)</simpara></listitem>
    <listitem>
     <simpara><emphasis>Iterations</emphasis>: iterations defines the number of additional times to apply the algorithm when generating an NSEC3 hash. More iterations yields more secure results, but consumes more resources for both authoritative servers and validating resolvers.</simpara></listitem>
    <listitem>
     <simpara><emphasis>Salt</emphasis>: The salt is a string of data expressed in hexadecimal, or a hyphen (`-') if no salt is to be used. (see <xref linkend="advanced-discussions-nsec3-salt"/> for more information)</simpara></listitem>
   </itemizedlist></para>

   <para>So, for example, to create an NSEC3 chain using the SHA-1 hash algorithm, no opt-out flag, 10 iterations, and a salt value of "FFFF", use: 
    <screen># <userinput>rndc signing -nsec3param 1 0 10 FFFF example.com</userinput></screen></para>

   <para>To set the opt-out flag, 15 iterations, and no salt, use: 
    <screen># <userinput>rndc signing -nsec3param 1 1 15 - example.com</userinput></screen></para>
 
   <para>To learn more about NSEC and NSEC3, please see <xref linkend="advanced-discussions-proof-of-nonexistence" />.</para>
 </section>

 -->
 <!-- === Upload to Parent Zone Explained??? === -->

</section>
