<section id="validation-easy-start-explained">
 <title>Validation Easy Start Explained</title>
 <para>In <xref linkend="easy-start-guide-for-recursive-servers"/>, we used two
 lines of configuration to turn on DNSSEC validation. Now we are going to take
 a closer look at what it actually does, and some other options.</para>

 <!-- dnssec-enable -->
 <section id="dnssec-enable-explained">
  <title>dnssec-enable</title>
  <screen>options {
    dnssec-enable yes;
};</screen>

  <para>This line enables DNSSEC support, the default is yes, we're declaring
  it explicitly here. Note that if this is the only thing you enable and
  nothing else, the default validation behavior is set to rely on manual keys,
  and no validation will actually take place until you have manually configured
  at least one trusted key.</para>

 </section>

 <!-- dnssec-validation -->
 <section id="dnssec-validation-explained">
  <title>dnssec-validation</title>
  <screen>options {
    dnssec-validation auto;
};</screen>

  <para>This line enables DNSSEC validation in BIND, and no manual key
  configuration is needed. There are three possible choices:

   <itemizedlist>
    <listitem>
     <simpara><emphasis>yes</emphasis>: DNSSEC validation is enabled, but a
     trust anchor must be manually configured. This is the default.</simpara>
    </listitem>

    <listitem>
     <simpara><emphasis>no</emphasis>: DNSSEC validation is disabled, and
     recursive server will behave in the "old fashioned" way of performing
     insecure DNS lookups.</simpara>
    </listitem>

    <listitem>
     <simpara><emphasis>auto</emphasis>: DNSSEC validation is enabled, and a
     default trust anchor (included as part of BIND) for the DNS root zone is
     used.</simpara>
    </listitem>
   </itemizedlist>
  </para>

  <para>Let's discuss the difference between <replaceable>yes</replaceable> and
  <replaceable>auto</replaceable>. If you set it to
  <replaceable>yes</replaceable> (the default), the trust anchor will need to
  be manually defined and maintained using the <code>trusted-key</code>
  statement in the configuration file; if you set it to
  <replaceable>auto</replaceable> (as shown in the example), then no further
  action should be required as BIND includes a copy<footnote><para>BIND
  technically includes two copies of the root key, one is in
  <filename>bind.keys.h</filename> and is built into the executable, and one is
  in <filename>bind.keys</filename> as a <varname>managed-keys</varname>
  statement. The two copies of the key are identical.</para></footnote> of the
  root key. When set to <replaceable>auto</replaceable>, BIND will
  automatically keep the keys up-to-date without intervention from the DNS
  administrator.</para>
  
  <para>We recommend <replaceable>auto</replaceable> unless you
  have a good reason for requiring a manual trust anchor. To learn
  more about trust anchors, please refer to <xref
  linkend="trusted-keys-and-managed-keys"/>.</para>

  <note>
   <varname>dnssec-enable</varname> needs to be set to yes (default value is
   yes) in order for <varname>dnssec-validation</varname> to be effective.
  </note>
 </section>


 <!-- === How Does DNSSEC Change DNS Lookup (Revisited) === -->
 <section id="how-does-dnssec-change-dns-lookup-revisited">
  <title>How Does DNSSEC Change DNS Lookup (Revisited)?</title>
  <para>So by now you've enabled validation on your recursive name server, and
  verified that it works. What exactly changed? In <xref
  linkend="how-does-dnssec-change-dns-lookup"/> we looked at the very high
  level, simplified 12-steps of DNSSEC validation process. Let's revisit that
  process now and see what your validating resolver is doing in more detail.
  Again, we are using the example to lookup the A record for the domain name
  <code>www.isc.org</code>:</para>

  <para>
   <figure>
    <title>DNSSEC Validation 12 Steps, Revisited</title>
    <mediaobject>
     <imageobject>
      <imagedata fileref="../img/dnssec-12-steps.png" width="80%" scalefit="1"/>
    </imageobject>
    </mediaobject>
   </figure>

  <orderedlist>
   <!-- #1 -->
   <listitem>
    <simpara>Validating resolver queries <code>isc.org</code> name servers for
    the A record of <code>www.isc.org</code>. This query has the <code>DNSSEC
    OK</code> (<code>do</code>) bit set to 1, notifying the remote
    authoritative server that DNSSEC answers are desired.</simpara>
   </listitem>

   <!-- #2 -->
   <listitem>
    <simpara>The zone <code>isc.org</code> is signed, and its name servers are
    DNSSEC-aware, thus it responds with the answer to the A record query plus
    the RRSIG for the A record.</simpara>
   </listitem>

   <!-- #3 -->
   <listitem>
    <simpara>Validating resolver queries for the DNSKEY for
    <code>isc.org</code>.</simpara>
   </listitem>

   <!-- #4 -->
   <listitem>
    <simpara><code>isc.org</code> name server responds with the DNSKEY and
    RRSIG records. The DNSKEY is used to verify the answers received in
    #2.</simpara>
   </listitem>

   <!-- #5 -->
   <listitem>
    <simpara>Validating resolver queries the parent (<code>.org</code>) for the
    DS record for <code>isc.org</code>.</simpara>
   </listitem>

   <!-- #6 -->
   <listitem>
    <simpara><code>.org</code> name server responds with the DS and RRSIG
    records. The DS record is used to verify the answers received in
    #4.</simpara>
   </listitem>

   <!-- #7 -->
   <listitem>
    <simpara>Validating resolver queries for the DNSKEY for
    <code>.org</code>.</simpara>
   </listitem>

   <!-- #8 -->
   <listitem>
    <simpara><code>.org</code> name server responds with DNSKEY and RRSIG. The
    DNSKEY is used to verify the answers received in #6.</simpara>
   </listitem>

   <!-- #9 -->
   <listitem>
    <simpara>Validating resolver queries the parent (root) for the DS record
    for <code>.org</code>.</simpara>
   </listitem>

   <!-- #10 -->
   <listitem>
    <simpara>Root name server responds with DS and RRSIG records. The DS record
    is used to verify the answers received in #8.</simpara>
   </listitem>

   <!-- #11 -->
   <listitem>
    <simpara>Validating resolver queries for the DNSKEY for root.</simpara>
   </listitem>

   <!-- #12 -->
   <listitem>
    <simpara>Root name server responds with DNSKEY and RRSIG. The DNSKEY is
    used to verify the answers received in #10.</simpara>
   </listitem>
  </orderedlist></para>

  <para>After step #12, the validating resolver takes the DNSKEY received and
  compares to the key or keys it has configured, to decide whether or not the
  received key can be trusted. We will talk about these locally configured
  keys, or trust anchors, in <xref linkend="trust-anchors"/>.</para>

  <para>As you can see here, with DNSSEC, every response includes not just the
  answer, but a digital signature (RRSIG) as well. This is so the validating
  resolver can verify the answer received, and that's what we will look at in
  the next section, <xref linkend="how-are-answers-verified"/>.</para>

 </section>


 <!-- === How are Answers Verified? === -->
 <section id="how-are-answers-verified">
  <title>How are Answers Verified?</title> 
  <note>Keep in mind as you read this section, that although words like
  <emphasis>encryption</emphasis> and <emphasis>decryption</emphasis> are used
  from time to time, DNSSEC does not provide you with privacy. Public key
  cryptography is used to provide data authenticity (who sent it) and data
  integrity (it did not change during transit), but any eavesdropper can still
  see your DNS requests and responses in clear text, even when DNSSEC is
  enabled.</note>
  
  <para>So how exactly are DNSSEC answers verified? Before we can talk about
  how they are verified, let's first see how verifiable information is
  generated. On the authoritative server, each DNS record (or message) is run
  through a hash function, then this hashed value is encrypted by a private
  key. This encrypted hash value is the digital signature.</para>

  <figure>
   <title>Signature Generation</title>
   <mediaobject>
    <imageobject>
     <imagedata fileref="../img/signature-generation.png" width="80%" scalefit="1"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>When the validating resolver queries for the resource record, it
  receives both the plain-text message and the digital signature(s). The
  validating resolver knows the hash function used (listed in the digital
  signature record itself), so it can take the plain-text message and run it
  through the same hash function to produce a hashed value, let's call it hash
  value X. The validating resolver can also obtain the public key (published as
  DNSKEY records), decrypt the digital signature, and get back the original
  hashed value produced by the authoritative server, let's call it hash value
  Y. If hash values X and Y are identical, and the time is correct (more on
  what this means below), the answer is verified, meaning we know this answer
  came from the authoritative server (authenticity), and the content remained
  intact during transit (integrity).</para>

  <figure>
   <title>Signature Verification</title>
   <mediaobject>
    <imageobject>
     <imagedata fileref="../img/signature-verification.png" width="80%" scalefit="1"/>
    </imageobject>
   </mediaobject>
  </figure>
    
  <para>Take the A record <code>www.isc.org</code> for example, the plain text
  is:
   <screen>www.isc.org.		4 IN A	149.20.64.69</screen>
  </para>

  <para>The digital signature portion is:
   <screen>www.isc.org.		4 IN RRSIG A 5 3 60 (
				<userinput>20141029233238 20140929233238</userinput> 4521 isc.org.
				DX5BaGVd4KzU2AIH911Kar/UmdmkARyPhJVLr0oyPZaq
				5zoobGqFI4efvzL0mcpncuUg3BSU5Q48WdBu92xinMdb
				E75zl+adgEBOsFgFQR/zqM3myt/8SngWm4+TQ3XFh9eN
				jqExHZZuZ268Ntlxqgf9OmKRRv8X8YigaPShuyU= )</screen>
  </para>

  <para>When a validating resolver quires for the A record
  <code>www.isc.org</code>, it receives both the A record and the RRSIG record.
  It runs the A record through a hash function (in this example, it would be
  SHA1 as indicated by the number 5, signifying RSA-SHA1) and produces hash
  value X. The resolver also fetches the appropriate DNSKEY record to decrypt
  the signature, and the result of the decryption is hash value Y.</para>

  <para>But wait! There's more! Just because X equals Y doesn't mean everything
  is good. We still have to look at the time. Remember we mentioned a little
  earlier that we need to check if the time is correct? Well, look at the two
  highlighted timestamps in our example above, the two timestamps are:

   <itemizedlist>
    <listitem><simpara>Signature Expiration: 20141029233238</simpara></listitem>
    <listitem><simpara>Signature Inception: 20140929233238</simpara></listitem>
   </itemizedlist></para>

  <para>This tells us that this signature was generated UTC September 29th,
  2014, at 11:32:38PM (20140929233238), and it is good until UTC October 29th,
  2014, 11:32:38PM (20141029233238). And the validating resolver's current
  system time needs to fall between these two timestamps. Otherwise the
  validation fails, because it could be an attacker replaying an old captured
  answer set from the past, or feeding us a crafted one with incorrect future
  timestamps.</para>

  <para>If the answer passes both hash value check and timestamp check, it is
  validated, and the authenticated data (<code>ad</code>) bit is set, and
  response is sent to the client; if it does not verify, a SERVFAIL is returned
  to the client.</para>

 </section>
</section>
