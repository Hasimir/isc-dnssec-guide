<section id="recipes-nsec3">
 <title>NSEC, NSEC3, and Unsiging</title>

 <!-- === NSEC to NSEC3 === -->
 <section id="recipes-nsec-to-nsec3">
  <title>Migrating from NSEC to NSEC3</title>
  <para>This recipe describes how to go from using NSEC to NSEC3 for proof of
  non-existence, as described in both <xref linkend="signing-using-nsec3" />
  and <xref linkend="advanced-discussions-proof-of-nonexistence" />.</para>

  <para>This command below enables NSEC3 for the zone example.com, using a
  pseudo-random hex string 1234567890abcdef:</para>

  <screen># <userinput>rndc signing -nsec3param 1 0 10 1234567890abcdef example.com</userinput></screen>

  <para>You’ll know it worked if you see the following syslog messages:</para>

  <screen>Oct 21 13:47:21 received control channel command 'signing -nsec3param 1 0 10 1234567890abcdef example.com'
Oct 21 13:47:21 zone example.com/IN (signed): zone_addnsec3chain(1,CREATE,10,1234567890ABCDEF)</screen>

  <para>You can also verify that this worked by querying for a name you know
  that does not exist, and check for the presence of the NSEC3 record, such as
  this:</para>

  <screen>$ <userinput>dig @192.168.1.13 thereisnowaythisexists.example.com. A +dnssec +multiline</userinput>

...
TOM10UQBL336NFAQB3P6MOO53LSVG8UI.example.com. 300 IN <userinput>NSEC3</userinput> 1 0 10 1234567890ABCDEF (
				TQ9QBEGA6CROHEOC8KIH1A2C06IVQ5ER
				NS SOA RRSIG DNSKEY NSEC3PARAM )
...</screen>

  <para>Our example used four parameters: 1, 0, 10, and 1234567890ABCDEF, in
  the order they appeared. 1 represents the algorithm, 0 represents the opt-out
  flag, 10 represents the number of iterations, and 1234567890abcedf is the
  salt. To learn more about each of these parameters, please see <xref
  linkend="advanced-discussions-nsec3param" />.</para>

  <para>For example, to create an NSEC3 chain using the SHA-1 hash algorithm,
  no opt-out flag, 10 iterations, and a salt value of ”FFFF”, use: </para>

  <screen># <userinput>rndc signing -nsec3param 1 0 10 FFFF example.com</userinput></screen>

  <para>To set the opt-out flag, 15 iterations, and no salt, use:</para>

  <screen># <userinput>rndc signing -nsec3param 1 1 15 - example.com</userinput></screen>

 </section>


 <!-- === NSEC3 to NSEC === -->
 <section id="recipes-nsec3-to-nsec">
  <title>Migrating from NSEC3 to NSEC</title>
  
  <para>This recipe describes how to migrate from NSEC3 to NSEC for proof of
  non-existence.</para>

  <para>Migrating from NSEC3 back to NSEC is easy, just use the
  <command>rndc</command> like this:</para>

  <screen>$ <userinput>rndc signing -nsec3param none example.com</userinput></screen>

  <para>You know that it worked if you see these messages in syslog:</para>

  <screen>named[14093]: received control channel command 'signing -nsec3param none example.com'
named[14093]: zone example.com/IN: zone_addnsec3chain(1,REMOVE,10,1234567890ABCDEF)</screen>

  <para>Of course, you can query for a name that you know that does not exist,
  and you should no longer see any traces of NSEC3 records.</para>

  <screen>$ <userinput>dig @192.168.1.13 reieiergiuhewhiouwe.example.com. A +dnssec +multiline</userinput>

...
example.com.		300 IN NSEC aaa.example.com. NS SOA RRSIG NSEC DNSKEY
...
ns1.example.com.	300 IN NSEC web.example.com. A RRSIG NSEC
...</screen>
  
 </section>


 <!-- === Changing NSEC3 Salt === -->
 <section id="recipes-nsec3-salt">
  <title>Changing NSEC3 Salt</title>

  <para>In <xref linkend="advanced-discussions-nsec3-salt" />, we've discussed
  the reasons why you may want to change your salt once in a while for better
  privacy. In this recipe, we will look at what command to execute to actually
  change the salt, and how to verify that it has been changed.</para>

  <para>To change your NSEC3 salt, you may run the rndc signing command like
  this:</para>

  <screen># <userinput>rndc signing -nsec3param 1 1 10 fedcba0987654321 example.com</userinput></screen>
  
  <para>You should see the following messages in syslog, assuming your old salt
  was "1234567890abcdef":</para>

  <screen>named[15848]: zone example.com/IN: zone_addnsec3chain(1,REMOVE,10,1234567890ABCDEF)
named[15848]: zone example.com/IN: zone_addnsec3chain(1,CREATE|OPTOUT,10,FEDCBA0987654321)</screen>

  <para>You can of course, try to query the name server (192.168.1.13 in our
  example) for a name that does not exist, and check the NSEC3 record
  returned:</para>

  <screen>$ <userinput>dig @192.168.1.13 thereisnowaythisexists.example.com. A +dnssec +multiline</userinput>

...
TOM10UQBL336NFAQB3P6MOO53LSVG8UI.example.com. 300 IN <userinput>NSEC3 1 0 10 FEDCBA0987654321</userinput> (
				TQ9QBEGA6CROHEOC8KIH1A2C06IVQ5ER
				NS SOA RRSIG DNSKEY NSEC3PARAM )
...</screen>

  <note>
   <title>Pseudo-Random Salt</title>
   <para>You can use a pseudo-random source to create the salt for you. Here is
   an example on Linux to create a 16-character hex string:</para>

   <screen># rndc signing -nsec3param 1 0 10 $(head -c 300 /dev/random | sha1sum | cut -b 1-16) example.com</screen>
  </note>

 </section>


 <!-- === NSEC3 Optout === -->
 <section id="recipes-nsec3-optout">
  <title>NSEC3 Optout</title>
 </section>
</section>
