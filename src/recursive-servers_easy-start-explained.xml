<section id="validation-easy-start-explained">
 <title>Validation Easy Start Explained</title>
 <para>In <xref linkend="easy-start-guide-for-recursive-servers"/>, we used two lines of configuration to turn on DNSSEC validation. Now we are going to take a closer look at what it actually does, and some other options.</para>

 <!-- dnssec-enable -->
 <section id="dnssec-enable-explained">
  <title>dnssec-enable</title>
  <screen>options {
    dnssec-enable yes;
};</screen>

  <para>This line enables DNSSEC support, the default is yes, we're declaring it explicitly here. Note that if this is the only thing you enable and nothing else, the default validation behavior is set to rely on manual keys, and no validation will actually take place until you have manually configured at least one <code>trusted-key</code>.</para>
 </section>

 <!-- dnssec-validation -->
 <section id="dnssec-validation-explained">
  <title>dnssec-validation</title>
  <screen>options {
    dnssec-validation auto;
};</screen>

  <para>This line enables DNSSEC validation in named, and it will automatically get a key on file. Note <code>dnssec-enable</code> also needs to be set to yes to be effective (which by default it is). There are three possible choices:

   <itemizedlist>
    <listitem>
     <simpara><emphasis>yes</emphasis>: DNSSEC validation is enabled, but a trust anchor must be manually configured. This is the default.</simpara>
    </listitem>

    <listitem>
     <simpara><emphasis>no</emphasis>: DNSSEC validation is disabled, and recursive server will behave in the "old fashioned" way of performing insecure DNS lookups.</simpara>
    </listitem>

    <listitem>
     <simpara><emphasis>auto</emphasis>: DNSSEC validation is enabled, and a default trust anchor (included as part of BIND) for the DNS root zone is used.</simpara>
    </listitem>
   </itemizedlist>
  </para>

  <para>Let’s discuss the difference between <code>yes</code> and <code>auto</code>. If you set it to <code>yes</code> (the default), the trust anchor will need to be manually defined and maintained using the <code>trusted-key</code> statement in the configuration file; if you set it to <code>auto</code> (as shown in the example), then no further action should be required as BIND includes a copy<footnote><para>BIND technically includes two copies of the root key, one is in <code>bind.keys.h</code> and is built into the executable, and one is in <code>bind.keys</code> as a <code>managed-key</code> statement. The two copies of the key are identical.</para></footnote> of the root key. When set to <code>auto</code>, BIND will automatically keep the keys up-to-date without intervention from the DNS administrator.</para>
  
  <para>To learn more about trust anchors, please refer to <xref linkend="trusted-keys-and-managed-keys"/>.</para>
 </section>


 <!-- === How Does DNSSEC Change DNS Lookup (Revisited) === -->
 <section id="how-does-dnssec-change-dns-lookup-revisited">
  <title>How Does DNSSEC Change DNS Lookup (Revisited)?</title>
  <para>So by now you’ve enabled validation on your recursive name server, and verified that it works. What exactly changed? In <xref linkend="how-does-dnssec-change-dns-lookup"/> we looked at the very high level, simplified 12-steps of DNSSEC validation process. Let’s revisit that process now and see what your validating resolver is doing in more details. Again, we are using the example to lookup the A record for the domain name <code>www.isc.org</code>:</para>
  <para>
  <imagedata fileref="../img/image-placeholder.jpg"/>
  <orderedlist>
   <!-- #1 -->
   <listitem>
    <simpara>Validating resolver queries <code>isc.org</code> name servers for the A record of <code>www.isc.org</code>. This query has the <code>DNSSEC OK</code> (<code>do</code>) bit set to 1, notifying the remote authoritative server that DNSSEC answers are desired.</simpara>
   </listitem>
   <!-- #2 -->
   <listitem>
    <simpara>The zone <code>isc.org</code> is signed, and its name servers are DNSSEC-aware, thus it responds with the answer to the A record query plus the RRSIG for the A record.</simpara>
   </listitem>
   <!-- #3 -->
   <listitem>
	<simpara>Validating resolver queries for the DNSKEY for <code>isc.org</code>.</simpara>
   </listitem>
   <!-- #4 -->
   <listitem>
    <simpara><code>isc.org</code> name server responds with the DNSKEY and RRSIG records. The DNSKEY is used to verify the answers received in #2.</simpara>
   </listitem>
   <!-- #5 -->
   <listitem>
	<simpara>Validating resolver queries the parent (<code>.org</code>) for the DS record for <code>isc.org</code>.</simpara>
   </listitem>
   <!-- #6 -->
   <listitem>
	<simpara><code>.org</code> name server responds with the DS and RRSIG records. The DS record is used to verify the answers received in #4.</simpara>
   </listitem>
   <!-- #7 -->
   <listitem>
	<simpara>Validating resolver queries for the DNSKEY for <code>.org</code>.</simpara>
   </listitem>
   <!-- #8 -->
   <listitem>
    <simpara><code>.org</code> name server responds with DNSKEY and RRSIG. The DNSKEY is used to verify the answers received in #6.</simpara>
   </listitem>
   <!-- #9 -->
   <listitem>
    <simpara>Validating resolver queries the parent (root) for the DS record for <code>.org</code>.</simpara>
   </listitem>
   <!-- #10 -->
   <listitem>
    <simpara>Root name server responds with DS and RRSIG records. The DS record is used to verify the answers received in #8.</simpara>
   </listitem>
   <!-- #11 -->
   <listitem>
    <simpara>Validating resolver queries for the DNSKEY for root.</simpara>
   </listitem>
   <!-- #12 -->
   <listitem>
    <simpara>Root name server responds with DNSKEY and RRSIG. The DNSKEY is used to verify the answers received in #10.</simpara>
   </listitem>
  </orderedlist></para>

  <para>Just like in <xref linkend="how-does-dnssec-change-dns-lookup"/>, after step #12, the validating resolver takes the DNSKEY received and compares to the key or keys it has configured. These configured keys are also known as trust anchors, and that is what we will talk about next in <xref linkend="trust-anchors"/>.</para>
 </section>


 <!-- === How are Answers Verified? === -->
 <section id="how-are-answers-verified">
  <title>How are Answers Verified?</title> 
  <note>Keep in mind as you read this section, that although words like <emphasis>encryption</emphasis> and <emphasis>decryption</emphasis> are used from time to time, DNSSEC does not provide you with privacy. Public key cryptography is used to provide data authenticity (who sent it) and data integrity (it did not change during transit), but any eavesdropper can still see your DNS requests and responses in clear text, even whtn DNSSEC is enabled.</note>
  
  <para>So how exactly are DNSSEC answers verified? Before we can talk about how they are verified, let's first see how verifiable information is generated. On the authoritative server, each DNS record (or message) is run through a hash function, then this hashed value is encrypted by a private key. This encrypted hash value is the digital signature.</para>
  
  <para>When the validating resolver queries for the resource record, it receives both the plain-text message and the digital signature(s). The validating resolver knows the hash function used (listed in the digital signature record itself), it can take the plain-text message and run it through the same hash function to produce a hashed value, let's call it hash value X. The validating resolver can also obtain the public key (published as DNSKEY records), decrypt the digital signature, and get back the original hashed value produced by the authoritative server, let's call it hash value Y. If hash values X and Y are identical, the answer is verified, meaning we know this answer came from the authoritative server (authenticity), and the content remained intact during transit (integrity).</para>
  
  <para>Take the A record <code>www.isc.org</code> for example, the plain text is:
   <screen>www.isc.org.		4 IN A	149.20.64.69</screen></para>

  <para>The digital signature portion is:
   <screen>www.isc.org.		4 IN RRSIG A 5 3 60 (
				20141029233238 20140929233238 4521 isc.org.
				DX5BaGVd4KzU2AIH911Kar/UmdmkARyPhJVLr0oyPZaq
				5zoobGqFI4efvzL0mcpncuUg3BSU5Q48WdBu92xinMdb
				E75zl+adgEBOsFgFQR/zqM3myt/8SngWm4+TQ3XFh9eN
				jqExHZZuZ268Ntlxqgf9OmKRRv8X8YigaPShuyU= )</screen></para>
  <para>When a validating resolver quires for the A record www.isc.org, it receives both the A record and the RRSIG record. It runs the A record through a hash function (in this example, it would be SHA1 as indicated by the number 5, signifying RSA-SHA1) and produces hash value X. The resolver also fetches the appropriate DNSKEY record to decrypt the signature, and the result of the decryption is hash value Y.</para>
  
  <!-- TODO jkuo Thu Oct 30 06:37:49 UTC 2014
       Create two diagrams, one showing how signatures are generated by the authoritative
       name servers (private ZSK + hash), and one showing how validating resolvers use
       public ZSK + hash to verify the answer.
  -->
  <para>MESSAGE SIGNING GRAPHIC</para>
  <simpara><imagedata fileref="../img/image-placeholder.jpg" align="center"/></simpara>
  <para>MESSAGE VERIFYING GRAPHIC</para>
  <simpara><imagedata fileref="../img/image-placeholder.jpg" align="center"/></simpara>
 </section>
</section>
